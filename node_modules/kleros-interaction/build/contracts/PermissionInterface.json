{
  "contractName": "PermissionInterface",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "isPermitted",
      "outputs": [
        {
          "name": "allowed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n *  @title Permission Interface\n *  @author Cl√©ment Lesaege - <clement@lesaege.com>\n */\n\npragma solidity ^0.4.15;\n\n/**\n *  @title Permission Interface\n *  This is a permission interface for arbitrary values. The values can be cast to the required types.\n */\ninterface PermissionInterface{\n    /* External */\n\n    /**\n     *  @dev Return true if the value is allowed.\n     *  @param _value The value we want to check.\n     *  @return allowed True if the value is allowed, false otherwise.\n     */\n    function isPermitted(bytes32 _value) external view returns (bool allowed);\n}\n",
  "sourcePath": "/private/tmp/kleros-interaction/contracts/standard/permission/PermissionInterface.sol",
  "ast": {
    "absolutePath": "/private/tmp/kleros-interaction/contracts/standard/permission/PermissionInterface.sol",
    "exportedSymbols": {
      "PermissionInterface": [
        11355
      ]
    },
    "id": 11356,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11347,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".15"
        ],
        "nodeType": "PragmaDirective",
        "src": "94:24:33"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": " @title Permission Interface\n This is a permission interface for arbitrary values. The values can be cast to the required types.",
        "fullyImplemented": false,
        "id": 11355,
        "linearizedBaseContracts": [
          11355
        ],
        "name": "PermissionInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": " @dev Return true if the value is allowed.\n @param _value The value we want to check.\n @return allowed True if the value is allowed, false otherwise.",
            "id": 11354,
            "implemented": false,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "isPermitted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11349,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 11354,
                  "src": "526:14:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 11348,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "526:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "525:16:33"
            },
            "payable": false,
            "returnParameters": {
              "id": 11353,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11352,
                  "name": "allowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 11354,
                  "src": "565:12:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11351,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:4:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "564:14:33"
            },
            "scope": 11355,
            "src": "505:74:33",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 11356,
        "src": "263:318:33"
      }
    ],
    "src": "94:488:33"
  },
  "legacyAST": {
    "absolutePath": "/private/tmp/kleros-interaction/contracts/standard/permission/PermissionInterface.sol",
    "exportedSymbols": {
      "PermissionInterface": [
        11355
      ]
    },
    "id": 11356,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11347,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".15"
        ],
        "nodeType": "PragmaDirective",
        "src": "94:24:33"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": " @title Permission Interface\n This is a permission interface for arbitrary values. The values can be cast to the required types.",
        "fullyImplemented": false,
        "id": 11355,
        "linearizedBaseContracts": [
          11355
        ],
        "name": "PermissionInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": " @dev Return true if the value is allowed.\n @param _value The value we want to check.\n @return allowed True if the value is allowed, false otherwise.",
            "id": 11354,
            "implemented": false,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "isPermitted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11349,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 11354,
                  "src": "526:14:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 11348,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "526:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "525:16:33"
            },
            "payable": false,
            "returnParameters": {
              "id": 11353,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11352,
                  "name": "allowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 11354,
                  "src": "565:12:33",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11351,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:4:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "564:14:33"
            },
            "scope": 11355,
            "src": "505:74:33",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 11356,
        "src": "263:318:33"
      }
    ],
    "src": "94:488:33"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-10-05T13:35:54.458Z"
}