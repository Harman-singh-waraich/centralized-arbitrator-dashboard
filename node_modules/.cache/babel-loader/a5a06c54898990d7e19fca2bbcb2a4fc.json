{"ast":null,"code":"import _regeneratorRuntime from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/u/repos/arbitrator-integration-demo/src/Dashboard.js\";\nimport web3 from './ethereum/web3';\nimport React from 'react';\nimport { arbitratorInstance, getOwner, getArbitrationCost, getDispute, getDisputeStatus, setArbitrationPrice, disputeCreationEvent } from './ethereum/centralizedArbitrator';\nimport { arbitrableInstanceAt } from './ethereum/multipleArbitrableTransaction';\nimport Disputes from './Disputes';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this));\n\n    _this.updateMetaEvidence =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var disputes, disputeID;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(event);\n                disputes = _this.state.disputes;\n                disputeID = event.returnValues[0];\n\n                if (disputes[disputeID]) {\n                  disputes[disputeID].metaevidence = event.returnValues[1];\n\n                  _this.setState({\n                    disputes: disputes\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.updateEvidence =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(event);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.updateDispute =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(event);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.updateRuling =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var disputes;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                disputes = _this.state.disputes;\n                disputes[event.returnValues._disputeID].ruling = event.returnValues[3];\n                _context4.next = 4;\n                return getDisputeStatus(event.returnValues._disputeID);\n\n              case 4:\n                disputes[event.returnValues._disputeID].status = _context4.sent;\n\n                _this.setState({\n                  disputes: disputes\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.updateDispute =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(event) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.addDispute =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(event) {\n        var disputes, disputeID, dispute, length;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                disputes = _this.state.disputes;\n                disputeID = event.returnValues._disputeID;\n                _context6.next = 4;\n                return getDispute(disputeID);\n\n              case 4:\n                dispute = _context6.sent;\n                console.log(dispute);\n                length = disputes.push(dispute);\n                disputes[length - 1].key = disputeID;\n                arbitrableInstanceAt(event.returnValues._arbitrable).events.Ruling({}, {\n                  fromBlock: 0,\n                  toBlock: \"latest\"\n                }).on('data', function (event) {\n                  _this.updateRuling(event);\n                });\n                arbitrableInstanceAt(event.returnValues._arbitrable).events.MetaEvidence({}, {\n                  fromBlock: 0,\n                  toBlock: \"latest\"\n                }).on('data', function (event) {\n                  _this.updateMetaEvidence(event);\n                });\n                arbitrableInstanceAt(event.returnValues._arbitrable).events.Evidence({}, {\n                  fromBlock: 0,\n                  toBlock: \"latest\"\n                }).on('data', function (event) {\n                  console.log(\"Evidence\");\n\n                  _this.updateDispute(event);\n                });\n                arbitrableInstanceAt(event.returnValues._arbitrable).events.Dispute({}, {\n                  fromBlock: 0,\n                  toBlock: \"latest\"\n                }).on('data', function (event) {\n                  console.log(event);\n\n                  _this.updateDispute(event);\n                });\n\n                _this.setState({\n                  disputes: disputes\n                });\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.setArbitrationCost =\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(newCost) {\n        var arbitrationCost;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this.setState({\n                  arbitrationCost: \"awaiting...\"\n                });\n\n                _context7.next = 3;\n                return setArbitrationPrice(newCost);\n\n              case 3:\n                _context7.next = 5;\n                return getArbitrationCost(\"\");\n\n              case 5:\n                arbitrationCost = _context7.sent;\n\n                _this.setState({\n                  arbitrationCost: arbitrationCost\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      owner: \"\",\n      arbitrationCost: \"\",\n      disputes: []\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var _this2 = this;\n\n        var owner, arbitrationCost, result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return getOwner();\n\n              case 2:\n                owner = _context8.sent;\n                _context8.next = 5;\n                return getArbitrationCost(\"\");\n\n              case 5:\n                arbitrationCost = _context8.sent;\n                this.setState({\n                  owner: owner,\n                  arbitrationCost: arbitrationCost\n                });\n                arbitratorInstance.events.DisputeCreation({}, {\n                  fromBlock: 0,\n                  toBlock: \"latest\"\n                }).on('data', function (event) {\n                  _this2.addDispute(event);\n                }).on('changed', function (event) {// remove event from local database\n                }).on('error', console.error);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Owner: \", web3.eth.accounts[0] == this.state.owner ? \"You\" : this.state.owner), React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n\n          _this3.setArbitrationCost(_this3.state.arbitrationCost);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Arbitration Price: \", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.arbitrationCost,\n        onChange: function onChange(e) {\n          _this3.setState({\n            arbitrationCost: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Change Price\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }))), React.createElement(Disputes, {\n        items: this.state.disputes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/u/repos/arbitrator-integration-demo/src/Dashboard.js"],"names":["web3","React","arbitratorInstance","getOwner","getArbitrationCost","getDispute","getDisputeStatus","setArbitrationPrice","disputeCreationEvent","arbitrableInstanceAt","Disputes","Dashboard","updateMetaEvidence","event","console","log","disputes","state","disputeID","returnValues","metaevidence","setState","updateEvidence","updateDispute","updateRuling","_disputeID","ruling","status","addDispute","dispute","length","push","key","_arbitrable","events","Ruling","fromBlock","toBlock","on","MetaEvidence","Evidence","Dispute","setArbitrationCost","newCost","arbitrationCost","owner","DisputeCreation","error","eth","accounts","e","preventDefault","target","value","Component"],"mappings":"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","sourcesContent":["import web3 from './ethereum/web3'\nimport React from 'react';\nimport {arbitratorInstance, getOwner, getArbitrationCost, getDispute, getDisputeStatus, setArbitrationPrice, disputeCreationEvent} from './ethereum/centralizedArbitrator'\nimport {arbitrableInstanceAt} from './ethereum/multipleArbitrableTransaction'\nimport Disputes from './Disputes'\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      owner: \"\",\n      arbitrationCost: \"\",\n      disputes: []\n    }\n\n  }\n  async componentDidMount(){\n    const owner = await getOwner()\n    const arbitrationCost = await getArbitrationCost(\"\")\n    this.setState({owner, arbitrationCost})\n\n    let result\n    arbitratorInstance.events.DisputeCreation({}, {fromBlock: 0, toBlock: \"latest\"})\n    .on('data', (event) => {\n        this.addDispute(event)\n    })\n    .on('changed', function(event){\n        // remove event from local database\n    })\n    .on('error', console.error);\n\n  }\n\n  updateMetaEvidence = async (event) => {\n    console.log(event)\n    let disputes = this.state.disputes\n    let disputeID = event.returnValues[0]\n\n    if(disputes[disputeID])\n    {\n      disputes[disputeID].metaevidence = event.returnValues[1]\n      this.setState({disputes: disputes})\n    }\n\n  }\n\n  updateEvidence = async (event) => {\n    console.log(event)\n\n  }\n\n  updateDispute = async (event) => {\n    console.log(event)\n  }\n\n\n  updateRuling = async (event) => {\n    let disputes = this.state.disputes\n    disputes[event.returnValues._disputeID].ruling = event.returnValues[3]\n    disputes[event.returnValues._disputeID].status = await getDisputeStatus(event.returnValues._disputeID)\n    this.setState({disputes: disputes})\n  }\n\n\n  updateDispute = async (event) => {\n\n  }\n\n  addDispute = async (event) => {\n\n    let disputes = this.state.disputes\n    let disputeID = event.returnValues._disputeID\n\n    let dispute = await getDispute(disputeID)\n    console.log(dispute)\n    const length = disputes.push(dispute)\n    disputes[length-1].key = disputeID\n\n    arbitrableInstanceAt(event.returnValues._arbitrable).events.Ruling({}, {fromBlock: 0, toBlock: \"latest\"})\n    .on('data', (event) => {\n      this.updateRuling(event)\n    })\n\n    arbitrableInstanceAt(event.returnValues._arbitrable).events.MetaEvidence({}, {fromBlock: 0, toBlock: \"latest\"})\n    .on('data', (event) => {\n      this.updateMetaEvidence(event)\n    })\n\n    arbitrableInstanceAt(event.returnValues._arbitrable).events.Evidence({}, {fromBlock: 0, toBlock: \"latest\"})\n    .on('data', (event) => {\n      console.log(\"Evidence\")\n      this.updateDispute(event)\n    })\n\n    arbitrableInstanceAt(event.returnValues._arbitrable).events.Dispute({}, {fromBlock: 0, toBlock: \"latest\"})\n    .on('data', (event) => {\n      console.log(event)\n      this.updateDispute(event)\n    })\n\n    this.setState({disputes: disputes})\n  }\n\n\n  setArbitrationCost = async (newCost) => {\n    this.setState({arbitrationCost: \"awaiting...\"})\n    await setArbitrationPrice(newCost)\n    const arbitrationCost = await getArbitrationCost(\"\")\n    this.setState({arbitrationCost})\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h4>Owner: {web3.eth.accounts[0] == this.state.owner ? \"You\" : this.state.owner}</h4>\n        <form onSubmit={(e) => {e.preventDefault();this.setArbitrationCost(this.state.arbitrationCost)}}>\n          <label>\n            Arbitration Price: <input type=\"text\" value={this.state.arbitrationCost} onChange={(e) => {this.setState({arbitrationCost: e.target.value})}} />\n            <input type=\"submit\" value=\"Change Price\" />\n          </label>\n        </form>\n        <Disputes items={this.state.disputes}/>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}