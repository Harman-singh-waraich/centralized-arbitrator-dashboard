{"ast":null,"code":"import _regeneratorRuntime from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/u/repos/arbitrator-integration-demo/src/Dashboard.js\";\nimport web3 from './ethereum/web3';\nimport React from 'react';\nimport { instance, getOwner, getArbitrationCost, getDispute, setArbitrationPrice, disputeCreationEvent } from './ethereum/centralizedArbitrator';\nimport Disputes from './Disputes';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this));\n\n    _this.setArbitrationCost =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(newCost) {\n        var arbitrationCost;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState({\n                  arbitrationCost: \"awaiting...\"\n                });\n\n                _context.next = 3;\n                return setArbitrationPrice(newCost);\n\n              case 3:\n                _context.next = 5;\n                return getArbitrationCost(\"\");\n\n              case 5:\n                arbitrationCost = _context.sent;\n\n                _this.setState({\n                  arbitrationCost: arbitrationCost\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      owner: \"\",\n      arbitrationCost: \"\",\n      disputes: []\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var owner, arbitrationCost, disputes, key;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return getOwner();\n\n              case 2:\n                owner = _context3.sent;\n                _context3.next = 5;\n                return getArbitrationCost(\"\");\n\n              case 5:\n                arbitrationCost = _context3.sent;\n                this.setState({\n                  owner: owner,\n                  arbitrationCost: arbitrationCost\n                });\n                _context3.next = 9;\n                return Promise.all([0, 1, 2, 3, 4].map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee2(x) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            return _context2.abrupt(\"return\", getDispute(x));\n\n                          case 1:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 9:\n                disputes = _context3.sent;\n\n                for (key = 0; key < 5; key++) {\n                  disputes[key].key = key;\n                }\n\n                console.log(disputes);\n                this.setState({\n                  disputes: disputes\n                }); // let event = instance.events.DisputeCreation()\n                // console.log(event)\n                //\n                // instance.events.DisputeCreation({\n                // }, function(error, event){\n                //   console.log(event);\n                // })\n                // .on('data', function(event){\n                //     console.log(event); // same results as the optional callback above\n                // })\n                // .on('changed', function(event){\n                //     // remove event from local database\n                // })\n                // .on('error', console.error);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Owner: \", this.state.owner), React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n\n          _this2.setArbitrationCost(_this2.state.arbitrationCost);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Arbitration cost: \", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.arbitrationCost,\n        onChange: function onChange(e) {\n          _this2.setState({\n            arbitrationCost: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(Disputes, {\n        items: this.state.disputes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/u/repos/arbitrator-integration-demo/src/Dashboard.js"],"names":["web3","React","instance","getOwner","getArbitrationCost","getDispute","setArbitrationPrice","disputeCreationEvent","Disputes","Dashboard","setArbitrationCost","newCost","setState","arbitrationCost","state","owner","disputes","Promise","all","map","x","key","console","log","e","preventDefault","target","value","Component"],"mappings":"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","sourcesContent":["import web3 from './ethereum/web3'\nimport React from 'react';\nimport {instance, getOwner, getArbitrationCost, getDispute, setArbitrationPrice, disputeCreationEvent} from './ethereum/centralizedArbitrator'\nimport Disputes from './Disputes'\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      owner: \"\",\n      arbitrationCost: \"\",\n      disputes: []\n    }\n  }\n  async componentDidMount(){\n    const owner = await getOwner()\n    const arbitrationCost = await getArbitrationCost(\"\")\n    this.setState({owner, arbitrationCost})\n\n    let disputes = await Promise.all([0,1,2,3,4].map(async x => getDispute(x)))\n    for(let key = 0; key < 5; key++){\n      disputes[key].key = key\n    }\n    console.log(disputes)\n    this.setState({disputes})\n\n    // let event = instance.events.DisputeCreation()\n    // console.log(event)\n    //\n    // instance.events.DisputeCreation({\n    // }, function(error, event){\n    //   console.log(event);\n    // })\n    // .on('data', function(event){\n    //     console.log(event); // same results as the optional callback above\n    // })\n    // .on('changed', function(event){\n    //     // remove event from local database\n    // })\n    // .on('error', console.error);\n\n  }\n\n  setArbitrationCost = async (newCost) => {\n    this.setState({arbitrationCost: \"awaiting...\"})\n    await setArbitrationPrice(newCost)\n    const arbitrationCost = await getArbitrationCost(\"\")\n    this.setState({arbitrationCost})\n  }\n\n\n  render() {\n    return (\n      <div>\n        <label>\n          Owner: {this.state.owner}\n        </label>\n\n        <form onSubmit={(e) => {e.preventDefault();this.setArbitrationCost(this.state.arbitrationCost)}} >\n          <label>\n            Arbitration cost: <input type=\"text\" value={this.state.arbitrationCost} onChange={(e) => {this.setState({arbitrationCost: e.target.value})}} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <Disputes items={this.state.disputes}/>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}