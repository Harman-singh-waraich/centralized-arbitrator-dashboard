{"ast":null,"code":"import _regeneratorRuntime from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/u/repos/arbitrator-integration-demo/src/Dispute.js\";\nimport web3 from './ethereum/web3';\nimport React from 'react';\nimport DisputeDetail from './DisputeDetail';\n\nvar Dispute =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dispute, _React$Component);\n\n  function Dispute(props) {\n    var _this;\n\n    _classCallCheck(this, Dispute);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dispute).call(this, props));\n\n    _this.disputeStatusToString = function (code) {\n      switch (code) {\n        case \"0\":\n          return \"Waiting\";\n          break;\n\n        case \"1\":\n          return \"Appealable\";\n          break;\n\n        case \"2\":\n          return \"Solved\";\n          break;\n\n        default:\n          return \"\" + code;\n      }\n    };\n\n    _this.parsedMetaEvidence2 = function () {\n      fetch(_this.props.metaevidence).then(function (response) {\n        console.log(response);\n        var returnValue;\n\n        try {\n          returnValue = response.json();\n        } catch (e) {\n          console.log(e);\n        }\n      }).then(function (myJson) {\n        var stringified = JSON.stringify(myJson);\n        console.error(stringified);\n        return stringified;\n      });\n    };\n\n    _this.parsedMetaEvidence =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(_this.props.metaevidence);\n\n            case 2:\n              response = _context.sent;\n              console.log(response);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    console.warn(\"here\");\n    console.log(props);\n    return _this;\n  }\n\n  _createClass(Dispute, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"clickable\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": '#accordion' + this.props.id,\n        \"aria-expanded\": \"false\",\n        \"aria-controls\": 'accordion' + this.props.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.props.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.props.arbitrated.substring(0, 12) + '...'), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, web3.utils.fromWei(this.props.fee, 'ether')), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.props.ruling), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.disputeStatusToString(this.props.status)))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: 'accordion' + this.props.id,\n        className: \"collapse\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(DisputeDetail, {\n        fileURI: \"\",\n        fileHash: \"\",\n        category: \"\",\n        title: \"\",\n        description: \"\",\n        question: \"\",\n        rulingOptions: \"\",\n        metaevidence: this.parsedMetaEvidence(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return Dispute;\n}(React.Component);\n\nexport default Dispute;","map":{"version":3,"sources":["/home/u/repos/arbitrator-integration-demo/src/Dispute.js"],"names":["web3","React","DisputeDetail","Dispute","props","disputeStatusToString","code","parsedMetaEvidence2","fetch","metaevidence","then","response","console","log","returnValue","json","e","myJson","stringified","JSON","stringify","error","parsedMetaEvidence","warn","id","arbitrated","substring","utils","fromWei","fee","ruling","status","Component"],"mappings":"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","sourcesContent":["import web3 from './ethereum/web3'\n\nimport React from 'react';\nimport DisputeDetail from './DisputeDetail'\n\nclass Dispute extends React.Component {\n\n  constructor(props){\n    super(props)\n    console.warn(\"here\")\n    console.log(props)\n  }\n\n  disputeStatusToString = (code) => {\n    switch (code) {\n      case \"0\":\n        return \"Waiting\"\n        break;\n      case \"1\":\n        return \"Appealable\"\n        break;\n      case \"2\":\n        return \"Solved\"\n        break;\n\n      default:\n        return \"\"+code\n    }\n\n  }\n\n\n  parsedMetaEvidence2 = () => {\n    fetch(this.props.metaevidence)\n      .then(function(response) {\n        console.log(response)\n        let returnValue\n        try{\n          returnValue = response.json();\n        }\n        catch(e)\n        {\n          console.log(e)\n        }\n      })\n      .then(function(myJson) {\n        let stringified = JSON.stringify(myJson)\n        console.error(stringified);\n        return stringified\n      });\n  }\n\n  parsedMetaEvidence = async () => {\n    let response = await fetch(this.props.metaevidence)\n    console.log(response)\n  }\n\n  render(){\n    return (\n          <React.Fragment>\n            <tbody>\n              <tr className=\"clickable\" data-toggle=\"collapse\" data-target={'#accordion' + this.props.id}  aria-expanded=\"false\" aria-controls={'accordion' + this.props.id}>\n                  <td>{this.props.id}</td>\n                  <td>{this.props.arbitrated.substring(0, 12) + '...'}</td>\n                  <td>{web3.utils.fromWei(this.props.fee, 'ether')}</td>\n                  <td>{this.props.ruling}</td>\n                  <td>{this.disputeStatusToString(this.props.status)}</td>\n              </tr>\n            </tbody>\n            <tbody>\n              <tr>\n                  <td colSpan=\"5\">\n                      <div id={'accordion' + this.props.id} className=\"collapse\">\n                        <DisputeDetail fileURI=\"\" fileHash=\"\" category=\"\" title=\"\" description=\"\" question=\"\" rulingOptions=\"\" metaevidence={this.parsedMetaEvidence()} />\n                      </div>\n                  </td>\n              </tr>\n            </tbody>\n          </React.Fragment>\n    )\n  }\n}\n\nexport default Dispute\n"]},"metadata":{},"sourceType":"module"}