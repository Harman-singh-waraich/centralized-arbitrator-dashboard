{"ast":null,"code":"import _regeneratorRuntime from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/u/repos/arbitrator-integration-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport web3 from './web3';\nimport CentralizedArbitrator from 'kleros-interaction/build/contracts/CentralizedArbitrator.json';\nconsole.log(web3);\nexport var instance = new web3.eth.Contract(CentralizedArbitrator.abi, '0x9b0cB8e6e96965B3457b407042E42146E5b8cE73', {\n  from: \"0x93814d65E91850FE137A23317e2708baD04F0867\",\n  gasPrice: 20000000000 // TODO Refactor hardcoded from address\n\n});\nconsole.log(instance);\nexport var getOwner =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", instance.methods.owner().call());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getOwner() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getArbitrationCost =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(extraData) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", instance.methods.arbitrationCost(web3.utils.utf8ToHex(extraData)).call());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getArbitrationCost(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var setArbitrationPrice =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(arbitrationPrice) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", instance.methods.setArbitrationPrice(arbitrationPrice).send());\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function setArbitrationPrice(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getDispute =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(index) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", instance.methods.disputes(index).call());\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n\n  return function getDispute(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var disputeCreationEvent = function disputeCreationEvent() {\n  var event = instance.events.DisputeCreation;\n  console.log(\"event: \" + event);\n  return event;\n};","map":{"version":3,"sources":["/home/u/repos/arbitrator-integration-demo/src/ethereum/centralizedArbitrator.js"],"names":["web3","CentralizedArbitrator","console","log","instance","eth","Contract","abi","from","gasPrice","getOwner","methods","owner","call","getArbitrationCost","extraData","arbitrationCost","utils","utf8ToHex","setArbitrationPrice","arbitrationPrice","send","getDispute","index","disputes","disputeCreationEvent","event","events","DisputeCreation"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,qBAAP,MAAkC,+DAAlC;AAEAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,OAAO,IAAMI,QAAQ,GAAG,IAAIJ,IAAI,CAACK,GAAL,CAASC,QAAb,CACtBL,qBAAqB,CAACM,GADA,EAEtB,4CAFsB,EAGtB;AAACC,EAAAA,IAAI,EAAE,4CAAP;AAAqDC,EAAAA,QAAQ,EAAE,WAA/D,CAA4E;;AAA5E,CAHsB,CAAjB;AAMPP,OAAO,CAACC,GAAR,CAAYC,QAAZ;AAGA,OAAO,IAAMM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CACfN,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,GAAyBC,IAAzB,EADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARH,QAAQ;AAAA;AAAA;AAAA,GAAd;AAIP,OAAO,IAAMI,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CACzBX,QAAQ,CAACO,OAAT,CAAiBK,eAAjB,CAAiChB,IAAI,CAACiB,KAAL,CAAWC,SAAX,CAAqBH,SAArB,CAAjC,EAAkEF,IAAlE,EADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBC,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAIP,OAAO,IAAMK,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,gBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAC1BhB,QAAQ,CAACO,OAAT,CAAiBQ,mBAAjB,CAAqCC,gBAArC,EAAuDC,IAAvD,EAD0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBF,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAIP,OAAO,IAAMG,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CACjBnB,QAAQ,CAACO,OAAT,CAAiBa,QAAjB,CAA0BD,KAA1B,EAAiCV,IAAjC,EADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVS,UAAU;AAAA;AAAA;AAAA,GAAhB;AAIP,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxC,MAAIC,KAAK,GAAGtB,QAAQ,CAACuB,MAAT,CAAgBC,eAA5B;AACA1B,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYuB,KAAxB;AACA,SAAOA,KAAP;AACD,CAJM","sourcesContent":["import web3 from './web3'\nimport CentralizedArbitrator from 'kleros-interaction/build/contracts/CentralizedArbitrator.json'\n\nconsole.log(web3)\n\nexport const instance = new web3.eth.Contract(\n  CentralizedArbitrator.abi,\n  '0x9b0cB8e6e96965B3457b407042E42146E5b8cE73',\n  {from: \"0x93814d65E91850FE137A23317e2708baD04F0867\", gasPrice: 20000000000} // TODO Refactor hardcoded from address\n)\n\nconsole.log(instance)\n\n\nexport const getOwner = async () => {\n  return instance.methods.owner().call()\n}\n\nexport const getArbitrationCost = async (extraData) => {\n  return instance.methods.arbitrationCost(web3.utils.utf8ToHex(extraData)).call()\n}\n\nexport const setArbitrationPrice = async (arbitrationPrice) => {\n  return instance.methods.setArbitrationPrice(arbitrationPrice).send()\n}\n\nexport const getDispute = async (index) => {\n  return instance.methods.disputes(index).call()\n}\n\nexport const disputeCreationEvent = () => {\n  let event = instance.events.DisputeCreation\n  console.log(\"event: \" + event)\n  return event\n}\n"]},"metadata":{},"sourceType":"module"}